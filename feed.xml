<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ntsanov.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ntsanov.com/" rel="alternate" type="text/html" /><updated>2021-01-06T10:50:16+02:00</updated><id>https://ntsanov.com/feed.xml</id><title type="html">Nikolay Tsanov - Full-Stack Web Developer</title><subtitle>A full-stack web developer with experience in Laravel and solid background in frontend development.</subtitle><author><name>Nikolay Tsanov</name></author><entry><title type="html">Nested Request Throttling in Laravel</title><link href="https://ntsanov.com/blog/nested-request-throttling-in-laravel" rel="alternate" type="text/html" title="Nested Request Throttling in Laravel" /><published>2021-01-05T00:00:00+02:00</published><updated>2021-01-05T00:00:00+02:00</updated><id>https://ntsanov.com/blog/nested-request-throttling-in-laravel</id><content type="html" xml:base="https://ntsanov.com/blog/nested-request-throttling-in-laravel">&lt;p&gt;Let me set the stage first: You have a globally assigned throttle middleware on a specific route group or maybe even assigned directly inside the RouteServiceProvider on all routes from a specific file. Then, you try to assign (nest) the throttle middleware inside that group onto a specific route expecting that the global throttle values will be overwritten by the nested values just to be surprised that the route gets locked after fewer requests than specified (more specifically, in the case of a single nested throttle middleware - 2 times fewer requests than expected).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/nested-request-throttling-in-laravel/429-error.png&quot; alt=&quot;429 response code after exceeding the requests' limit&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;429 response code after exceeding the requests‚Äô limit&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I found myself in this scenario and after giving some thought it does make sense - the middleware is called twice so two hits rather than one. (The &lt;code class=&quot;highlighter-rouge&quot;&gt;X-RateLimit-Remaining&lt;/code&gt; header gets decremented by 2 rather than 1) However, how can we overcome this obstacle?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can remove the global throttle middleware and just apply it on all routes we need it. (Quite a bit of repeating indeed)&lt;/li&gt;
  &lt;li&gt;Perhaps, we can extend the default throttle middleware and implement some kind of an identifier that we‚Äôll use to differentiate the throttles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, Laravel already has a &lt;a href=&quot;https://github.com/laravel/framework/pull/28856&quot;&gt;solution&lt;/a&gt; for us! It uses the second approach to prefix the various throttles so that we can use them independently. Unfortunately, the documentation doesn‚Äôt mention this, however, it is pretty straightforward.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// User can send 1000 requests of any kind in an hour.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'throttle:1000,60'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// User can download 10 times a minute.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/download'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ImageController@download'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'throttle:10,1,minute_download'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// User can search 100 times an hour&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ImageController@search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'throttle:100,60,search'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Use default throttle, user can send 1000 images in an hour.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/send'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ImageController@send'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This feature has been introduced in Laravel 6.0. For any previous versions, you need to extend the default throttle and implement your own solution.&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="laravel" /><category term="php" /><summary type="html">Let me set the stage first: You have a globally assigned throttle middleware on a specific route group or maybe even assigned directly inside the RouteServiceProvider on all routes from a specific file. Then, you try to assign (nest) the throttle middleware inside that group onto a specific route expecting that the global throttle values will be overwritten by the nested values just to be surprised that the route gets locked after fewer requests than specified (more specifically, in the case of a single nested throttle middleware - 2 times fewer requests than expected).</summary></entry><entry><title type="html">PhpStorm, But Better! #3 - üì¶ Battle Tested Plugins</title><link href="https://ntsanov.com/blog/phpstorm-but-better-battle-tested-plugins" rel="alternate" type="text/html" title="PhpStorm, But Better! #3 - üì¶ Battle Tested Plugins" /><published>2020-09-09T00:00:00+03:00</published><updated>2020-09-09T00:00:00+03:00</updated><id>https://ntsanov.com/blog/phpstorm-but-better-battle-tested-plugins</id><content type="html" xml:base="https://ntsanov.com/blog/phpstorm-but-better-battle-tested-plugins">&lt;p&gt;This is an archive of the third email from the series - &lt;a href=&quot;http://phpstormbutbetter.com/&quot;&gt;‚ÄúPhpStorm, But Better!‚Äù&lt;/a&gt;. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!&lt;/p&gt;

&lt;p&gt;In this article, I‚Äôll to talk about plugins that I use every day. Small disclaimer, the plugins are rapidly changing and from time to time you‚Äôll find yourself switching from one to another for several reasons - performance, ease of use, etc. On top of that, the PhpStorm‚Äôs team are often introducing new updates in which they implement wanted functionality from the community that makes some plugins obsolete.&lt;/p&gt;

&lt;p&gt;PhpStorm comes with a ton of functionality out of the box, and as we experienced in a previous email (&lt;a href=&quot;/blog/phpstorm-but-better-getting-rid-of-the-distractions&quot;&gt;Getting Rid Of The Distractions&lt;/a&gt;), it might feel a bit too much. However, this also greatly benefits the developer - you don‚Äôt need to find various plugins and manually set them up to get a common functionality.&lt;/p&gt;

&lt;p&gt;The list that I‚Äôll present you is nothing out of the ordinary and you‚Äôve probably used some of the plugins already. Even though it is not a long list, it can help you become more productive which is not only good for you but also your clients.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;h3 id=&quot;topic-i---aestetics&quot;&gt;Topic I - Aestetics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Laravel Development&lt;/li&gt;
  &lt;li&gt;Symfony Development&lt;/li&gt;
  &lt;li&gt;Extra Plugins&lt;/li&gt;
  &lt;li&gt;Fun Plugins To Explore&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;laravel-development&quot;&gt;Laravel Development&lt;/h2&gt;
&lt;p&gt;If you are a Laravel developer, you‚Äôve probably already heard of this plugin. It is an absolute must-have! It doesn‚Äôt only include autocompletion, but also blade support and easy navigation between files. You can check the whole list of features on the plugin‚Äôs &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7532-laravel&quot;&gt;homepage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The installation is pretty straightforward, you install the plugin inside PhpStorm (&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences/Settings &amp;gt; Plugins&lt;/code&gt; and you search for the wanted plugin inside the &lt;strong&gt;Marketplace&lt;/strong&gt;‚Äôs section) and you activate it per project (&lt;code class=&quot;highlighter-rouge&quot;&gt;Settings/Preferences &amp;gt; Languages &amp;amp; Frameworks &amp;gt; PHP &amp;gt; Laravel&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-battle-tested-plugins/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, to get the full power of it, you need to also install a certain package inside your project. The package is called &lt;a href=&quot;https://github.com/barryvdh/laravel-ide-helper&quot;&gt;Laravel IDE Helper&lt;/a&gt; and it is maintained by &lt;a href=&quot;https://twitter.com/barryvdh?lang=en&quot;&gt;Barry vd. Heuvel&lt;/a&gt; (make sure to follow him, he knows a thing or two about Laravel!). &lt;a href=&quot;https://github.com/barryvdh/laravel-ide-helper&quot;&gt;Laravel IDE Helper&lt;/a&gt;, as the name indicates, generates helper files based on your project for better autocompletion. To install the package, head to your terminal, navigate to your project and use composer to install it. &lt;code class=&quot;highlighter-rouge&quot;&gt;composer require --dev barryvdh/laravel-ide-helper&lt;/code&gt;. Make sure it is only a require-dev dependency, you don‚Äôt want this on production. Then, you can simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan ide-helper:generate&lt;/code&gt; to generate the &lt;strong&gt;_ide_helper.php&lt;/strong&gt; file and also add it to &lt;strong&gt;.gitignore&lt;/strong&gt; (you don‚Äôt want potential conflicts when working with other people on the project). The package is fully customisable, you can check the Github‚Äôs &lt;a href=&quot;https://github.com/barryvdh/laravel-ide-helper&quot;&gt;homepage&lt;/a&gt; for all of the configurations. What I tend to do to avoid the tedious task of running the command every time I update the packages‚Äô list is to add it to the &lt;strong&gt;composer.json&lt;/strong&gt; file to &lt;a href=&quot;https://github.com/barryvdh/laravel-ide-helper#automatic-phpdoc-generation-for-laravel-facades&quot;&gt;run every time on update&lt;/a&gt;. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;@php artisan ide-helper:generate&lt;/code&gt; inside the post-update-cmd.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-battle-tested-plugins/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are few other commands you can run, namely the &lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan ide-helper:meta&lt;/code&gt; command that adds support for factory design patterns by generating a &lt;strong&gt;.phpstorm.meta.php&lt;/strong&gt; (add it to the &lt;strong&gt;.gitignore&lt;/strong&gt; file as well) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan ide-helpers:models&lt;/code&gt; command that generates PHPDocs for all of your models (be careful with this one, it needs a working database connection in the &lt;strong&gt;.env&lt;/strong&gt; file).&lt;/p&gt;

&lt;h2 id=&quot;symfony-development&quot;&gt;Symfony Development&lt;/h2&gt;
&lt;p&gt;Symfony is another great framework for PHP that is well-known. I haven‚Äôt done any Symfony projects in a while now, however, I can advise you on installing the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7219-symfony-support/&quot;&gt;Symfony Support&lt;/a&gt; plugin alongside &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7320-php-annotations/&quot;&gt;PHP Annotations&lt;/a&gt; (required by Symfony Support). These two combined work like a charm. You still need to enable it per project &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings/Preferences &amp;gt; Languages &amp;amp; Frameworks &amp;gt; PHP &amp;gt; Symfony&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extra-plugins&quot;&gt;Extra Plugins&lt;/h2&gt;
&lt;p&gt;The previously mentioned plugins are probably the most important ones you‚Äôll need. However, there are still a few additions you can install that will make your PhpStorm‚Äôs setup that more interesting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‚Äã&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7495--ignore&quot;&gt;.gitignore&lt;/a&gt; - While having this plugin is not that important because editing a .gitignore happens rarely, it still brings value to the table. My favourite feature is the set of templates that you can use when creating a new .gitignore file. All of the templates‚Äô rules are based on &lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;Github‚Äôs template collection&lt;/a&gt;. Another cool feature is the syntax highlighting, even though I don‚Äôt use it that often.&lt;/li&gt;
  &lt;li&gt;‚Äã&lt;a href=&quot;https://plugins.jetbrains.com/plugin/9525--env-files-support&quot;&gt;.env&lt;/a&gt; files support - Environment variables completion and syntax highlighting. Pretty useful in the long run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll explore more plugins when I talk about Docker/Vagrant integration and Xdebug.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;fun-plugins-to-explore&quot;&gt;Fun Plugins To Explore&lt;/h2&gt;
&lt;p&gt;In this section, I want to show you a few plugins that are mainly for fun, however, they can be utilised for learning or even saving time in the long run.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7160-camelcase&quot;&gt;‚ÄãCamelCase&lt;/a&gt; - Toggle between different styles - kebab-case, SNAKE_CASE, PascalCase, camelCase, snake_case or space case.
&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-battle-tested-plugins/2.gif&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;‚Äã&lt;a href=&quot;https://plugins.jetbrains.com/plugin/9792-key-promoter-x&quot;&gt;Key Promoter&lt;/a&gt; - If you are new to the shortcuts game, make sure you install this! As the name says, it will prompt you with the key combinations for actions that you often do. It helped me find combinations that I didn‚Äôt even know exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I mentioned in the beginning, the list is not that big, however, along the way we‚Äôll be exploring various other plugins on top of these.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next Time&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to open files/projects directly from the terminal using a neat command (similar to VS Code‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; command).&lt;/li&gt;
  &lt;li&gt;Understanding the real power of shortcodes.&lt;/li&gt;
  &lt;li&gt;Quick file navigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/blog/phpstorm-but-better-making-it-look-pretty&quot; class=&quot;previous-from-series-button&quot;&gt;Making It Look Pretty&lt;/a&gt;&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="phpstorm" /><category term="tools" /><category term="php" /><summary type="html">This is an archive of the third email from the series - ‚ÄúPhpStorm, But Better!‚Äù. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!</summary></entry><entry><title type="html">PhpStorm, But Better! #2 - Making It Look Pretty</title><link href="https://ntsanov.com/blog/phpstorm-but-better-making-it-look-pretty" rel="alternate" type="text/html" title="PhpStorm, But Better! #2 - Making It Look Pretty" /><published>2020-07-30T00:00:00+03:00</published><updated>2020-07-30T00:00:00+03:00</updated><id>https://ntsanov.com/blog/phpstorm-but-better-making-it-look-pretty</id><content type="html" xml:base="https://ntsanov.com/blog/phpstorm-but-better-making-it-look-pretty">&lt;p&gt;This is an archive of the second email from the series - &lt;a href=&quot;http://phpstormbutbetter.com/&quot;&gt;‚ÄúPhpStorm, But Better!‚Äù&lt;/a&gt;. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!&lt;/p&gt;

&lt;p&gt;Today, we‚Äôll explore one of the most interesting topics for me - &lt;strong&gt;making the IDE look good&lt;/strong&gt;. As I mentioned in the last email, having a good theme and font is essential. You‚Äôll be staring many hours at that exact screen, so you need to take your time and make it look appealing. However, it‚Äôs not only for you to look fancy in front of colleagues, but you also need a theme that will suit your environment and a font that is easy to read. For example, if you are in a bright environment, you need a light theme that will help you relax your eyes. If you are working late and it‚Äôs dark, you might prefer a dark theme. When switching from dark to light, or the other way around, it takes some getting used to, however, always consider it as a fresh start which might even motivate you to write more code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: This is a controversial topic, all of the information given here is just suggestions that you might or might not follow. Everything is up to you!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;h3 id=&quot;topic-i---aestetics&quot;&gt;Topic I - Aestetics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;Removing the Panels and Floating Tools&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Moving The Sidebar (Projects Explorer)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Picking Up A Theme&lt;/li&gt;
  &lt;li&gt;Picking Up Font&lt;/li&gt;
  &lt;li&gt;Better Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;picking-up-a-theme&quot;&gt;Picking Up A Theme&lt;/h2&gt;
&lt;p&gt;We‚Äôll start with deciding on a theme. I‚Äôll first give you few suggestions for a light theme and the reasons behind using one. Then, the same procedure for a dark theme. Lastly, I‚Äôll finish off with a suggestion for a theme that is in between dark and light.&lt;/p&gt;

&lt;h3 id=&quot;light-theme&quot;&gt;Light Theme&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, leaving jokes aside, there are many benefits for using a light theme and there are some misunderstandings about it. You can check Brent Roose‚Äôs video on this topic. He explains the difference between contrast and brightness, colours, visual patterns and much more. I‚Äôll summerise some of the information related to the themes.&lt;/p&gt;

&lt;p&gt;Many people prefer dark themes invoking the reason that light themes hurt their eyes. However, this is simply not true. Brightness is what hurts your eyes, not the contrast of the theme. Many studies have shown that having dark text on a light background is much easier to read than having the opposite (especially for prolonged periods).&lt;/p&gt;

&lt;p&gt;Introducing to you, &lt;a href=&quot;https://github.com/brendt/phpstorm-photon-theme&quot;&gt;Photon&lt;/a&gt; colour scheme for PhpStorm by none other than Brent himself. It is a high contrast scheme based on the colour palette of Firefox‚Äôs dev tools.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/1.png&quot; alt=&quot;Photon&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Photon&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The easiest way to import the colour scheme is by opening your preferences dialog (&lt;strong&gt;macOS: PhpStorm &amp;gt; Preferences‚Ä¶&lt;/strong&gt; or &lt;strong&gt;Windows, Linux: File &amp;gt; Settings&lt;/strong&gt;), then &lt;strong&gt;Editor &amp;gt; Color Scheme &amp;gt; Import Scheme‚Ä¶&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to do all of this manually, download the &lt;strong&gt;.icls&lt;/strong&gt; files from the repository and place them inside your PhpStorm preferences directory. The location depends on the OS and the version of PhpStorm. You can check more on their website. For version 2020.1 and above (I assume you are on the latest one), you can do this (where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;product&amp;gt;&lt;/code&gt; is PhpStorm):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Windows: &lt;code class=&quot;highlighter-rouge&quot;&gt;%APPDATA%\JetBrains\&amp;lt;product&amp;gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;macOS: &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Application Support/JetBrains/&amp;lt;product&amp;gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux: &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/JetBrains/&amp;lt;product&amp;gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the directory, you‚Äôll need to place your &lt;strong&gt;.icls&lt;/strong&gt; files in the &lt;strong&gt;/colors&lt;/strong&gt; folder (if you don‚Äôt have it, just create it).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, restart PhpStorm, open your preferences dialog (&lt;strong&gt;macOS: PhpStorm &amp;gt; Preferences‚Ä¶&lt;/strong&gt; or &lt;strong&gt;Windows, Linux: File &amp;gt; Settings&lt;/strong&gt;), from there &lt;strong&gt;Editor &amp;gt; Color Scheme and select the Photon - Light scheme&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are switching from a dark scheme to a light one, or the other way around, PhpStorm will ask whether you want the theme to also be changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, there is a difference between a scheme and a theme in PhpStorm. This is intuitive, however, I‚Äôll still mention it. The scheme is considered to be the syntax highlighting, while the theme is simply the colour of the dialogs, panels etc. So it goes without saying, having them match is better looking than having a huge contrast, though, you are free to experiment!&lt;/p&gt;

&lt;p&gt;If you are not a fan of the colours of the previous colour scheme, you can check &lt;a href=&quot;https://github.com/brendt/phpstorm-light-lite-theme&quot;&gt;Light Lite&lt;/a&gt;. I often find myself switching between those two. Light Lite is again made by Brent and it‚Äôs based on the colours of Google‚Äôs logo. You might have seen it already on some of &lt;a href=&quot;https://twitter.com/freekmurze&quot;&gt;Freek&lt;/a&gt;‚Äôs streams or his feed when posting a screenshot of a snippet.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/6.png&quot; alt=&quot;Light Lite&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Light Lite&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;dark-theme&quot;&gt;Dark Theme&lt;/h3&gt;
&lt;p&gt;If you are still not convinced about trying a light theme, I got you! I do use dark themes as well, especially when I‚Äôm working late on a dim light. I find it easier to write code on a dark background when it‚Äôs dark around me (personal preference). I won‚Äôt be talking too much about the popular &lt;a href=&quot;https://plugins.jetbrains.com/plugin/8006-material-theme-ui&quot;&gt;Material Theme UI&lt;/a&gt; that probably you‚Äôve seen more than once. If you want to find more on how to set it up, I advise you to check Christoph‚Äôs &lt;a href=&quot;https://www.youtube.com/watch?v=3SUtEnMj1ws&quot;&gt;video&lt;/a&gt; on it. My go-to dark theme, at the moment of writing, is &lt;a href=&quot;https://plugins.jetbrains.com/plugin/12275-dracula-theme&quot;&gt;Dracula&lt;/a&gt; + Material Theme UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just download the plugin and restart PhpStorm. After the restart, the plugin will be enabled, then you can do the trick I‚Äôve shown you last time - &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äúdracula‚Äù&lt;/strong&gt; and toggle it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;something-in-between-kinda&quot;&gt;Something In Between (Kinda)&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/9.png&quot; alt=&quot;Material Solarized Light&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Material Solarized Light&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you don‚Äôt want a dark theme, but you also find the light themes a bit too light, then this material theme + solarized light colour scheme is just for you.&lt;/p&gt;

&lt;p&gt;If you followed the steps from above and you already have the Material Theme UI enabled, then you are pretty much set. Just search for &lt;strong&gt;‚Äúsolarized light‚Äù&lt;/strong&gt; in the &lt;strong&gt;‚ÄúSearch everywhere‚Ä¶‚Äú&lt;/strong&gt; dialog and toggle it.&lt;/p&gt;

&lt;h2 id=&quot;picking-up-font&quot;&gt;Picking Up Font&lt;/h2&gt;
&lt;p&gt;Picking up font is the second most important thing after getting a nice theme on. I‚Äôll stick to the free fonts since not everyone is willing to pay for a premium and I‚Äôm one of those people - I easily get bored with fonts, and I tend to switch them from time to time. Paying any amount of money for a font that I might change in a month is not ideal.&lt;/p&gt;

&lt;p&gt;Now, with the pricing out of the way, &lt;strong&gt;legibility&lt;/strong&gt; is the most important thing! There was a trend recently where using a font with italic styling was the mainstream, and yes, while it looks nice, there is a reason why monospace fonts are better for programmers. The programmer needs to easily distinguish each letter - one extra symbol can break everything. You‚Äôll probably know the fonts that I‚Äôll mention, but that goes without saying that they are top in this niche.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‚Äã&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;Fira Code (Retina)&lt;/a&gt; - Yes, you‚Äôve probably seen it countless times and you might be even bored from it, however, this front stands out for its premium look which you get for free! Just head to the &lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;repository&lt;/a&gt; and try it out!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‚Äã&lt;a href=&quot;https://www.jetbrains.com/lp/mono/&quot;&gt;Jetbrains Mono&lt;/a&gt; - This font is my second top pick. It‚Äôs clean, it stands out and it is a really good alternative to Fira Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the difference is almost unnoticeable, but trust me you‚Äôll see it! To set up the font, go to the &lt;strong&gt;PhpStorm‚Äôs preferences &amp;gt; Editor &amp;gt; Font&lt;/strong&gt;. I like having enough space between the lines, so I always go for something higher such as 2.0. On my screen, 14px font size looks perfect, so I‚Äôm keeping it like that. You can play around and see what suits you the best!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people love font ligatures, some don‚Äôt. That‚Äôs up to you again! You can enable them with selecting the ‚ÄúEnable font ligatures‚Äù checkbox. You‚Äôll get these nice-looking symbols for !=, ==, === etc. Setting up a fallback font is also a good practice, however, if you are using Fira Code, pretty much everything is supported.&lt;/p&gt;

&lt;h2 id=&quot;better-icons&quot;&gt;Better Icons&lt;/h2&gt;
&lt;p&gt;We‚Äôll need to show some love to the sidebar. Even if you are not using it that much, you‚Äôll still have to toggle it at one point. The default icons are a bit too bland for my taste.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/13.png&quot; alt=&quot;Sidebar Before 'Better Icons'&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Sidebar Before ‚ÄòBetter Icons‚Äô&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/14.png&quot; alt=&quot;Sidebar After 'Better Icons'&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Sidebar After ‚ÄòBetter Icons‚Äô&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To achieve this, head to the plugins‚Äô marketplace and get the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10044-atom-material-icons&quot;&gt;Atom Material Icons&lt;/a&gt;. Install it (just like you did with the Material UI plugin), enable it, and everything will be set for you out of the box.&lt;/p&gt;

&lt;p&gt;Now, we are pretty much done with our layout. We‚Äôve organized the panels, we‚Äôve picked up a theme and font, and we also have nice looking icons! However, as mentioned by &lt;a href=&quot;https://twitter.com/iksaku2&quot;&gt;Jorge Gonz√°lez&lt;/a&gt; on Twitter, after reorganizing the various aspects of the layout (especially placing the sidebar on the right), we need to store it as default, otherwise, when creating a new project your panels might look out of place. To do that, simply select &lt;strong&gt;Window &amp;gt; Store Current Layout as Default&lt;/strong&gt; or &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äústore current layout as default‚Äù&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-making-it-look-pretty/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;news&quot;&gt;News&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;PhpStorm 2020.2 has been released! Check out more on their &lt;a href=&quot;https://www.jetbrains.com/phpstorm/whatsnew/&quot;&gt;website&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://alexvanderbist.com/&quot;&gt;Alex Vanderbist&lt;/a&gt; added a nice live template for quickly writing PHP arrow functions. Check out the gist he posted (we‚Äôll be exploring live templates later in the series).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thank you once more for the great feedback!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to contribute to the newsletter, don‚Äôt hesitate to contact me either on &lt;a href=&quot;https://twitter.com/NikolayTsanov&quot;&gt;Twitter&lt;/a&gt; or via email!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time, we‚Äôll explore plugins for PhpStorm that will make a huge difference in your daily workflow and more!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/phpstorm-but-better-getting-rid-of-the-distractions&quot; class=&quot;previous-from-series-button&quot;&gt;Getting Rid Of The Distractions&lt;/a&gt;&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="phpstorm" /><category term="tools" /><category term="php" /><summary type="html">This is an archive of the second email from the series - ‚ÄúPhpStorm, But Better!‚Äù. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!</summary></entry><entry><title type="html">PhpStorm, But Better! #1 - Getting Rid Of The Distractions</title><link href="https://ntsanov.com/blog/phpstorm-but-better-getting-rid-of-the-distractions" rel="alternate" type="text/html" title="PhpStorm, But Better! #1 - Getting Rid Of The Distractions" /><published>2020-07-10T00:00:00+03:00</published><updated>2020-07-10T00:00:00+03:00</updated><id>https://ntsanov.com/blog/phpstorm-but-better-getting-rid-of-the-distractions</id><content type="html" xml:base="https://ntsanov.com/blog/phpstorm-but-better-getting-rid-of-the-distractions">&lt;p&gt;This is an archive of the first email from the series - &lt;a href=&quot;http://phpstormbutbetter.com/&quot;&gt;‚ÄúPhpStorm, But Better!‚Äù&lt;/a&gt;. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!&lt;/p&gt;

&lt;p&gt;I plan to help you improve your PhpStorm workflow by synthesizing useful resources, news, plugins and much more. Over time, your use of the IDE will drastically change and your performance will be significantly improved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before I start, I want to present you with a few principles that I enforce when working with the IDE (If you follow Caleb‚Äôs amazing newsletter about working with VS Code (&lt;a href=&quot;https://makevscodeawesome.com/&quot;&gt;www.makevscodeawesome.com&lt;/a&gt;), you might be aware of some of them):&lt;/p&gt;

&lt;p&gt;Fewer distractions on the screen, more productive workflow.
The theme and font are important! (I cannot stress this enough! You‚Äôre going to be staring at the IDE for hours, you must make it easy on your eyes and brain!)
Shortcodes, shortcodes and more shortcodes! (If you can automate some actions, you should do it. There are many services that we, as developers, use that automate tedious tasks, we should do the same for our IDE).
Don‚Äôt rely on your IDE blindly! (You‚Äôll find out what I mean at a later point).
These are the core principles I follow when working with a specific IDE. If you don‚Äôt agree with them, that is perfectly fine! Consider this newsletter as an alternative point of view that might be helpful to you as well! The good thing about it, you can apply most of the information here to other JetBrains‚Äôs products - Intellij IDEA, WebStorm, PyCharm and more (you can find a list of their products on their &lt;a href=&quot;https://www.jetbrains.com/products.html&quot;&gt;website&lt;/a&gt;). The beauty of the JetBrain‚Äôs ecosystem is that their products are consistent, most of the settings are shared between them, so you can easily find your way. I‚Äôm not sponsored to say all of this, just my opinion!&lt;/p&gt;

&lt;p&gt;For students and teachers, you can get access to PhpStorm for free! More information can be found on JetBrains‚Äô website - or a simple Google search will do the trick as well. However, the purpose of these free licenses is for education only. If you are planning on using it on a commercial project, you‚Äôll have to purchase an individual license.&lt;/p&gt;

&lt;p&gt;Side note, I cannot express how thankful I am to the amazing PHP community! I‚Äôll try to be as much transparent as possible about the newsletter by sharing statistics that might be helpful for those of you that want to start something similar. You can follow me on Twitter (&lt;a href=&quot;https://twitter.com/NikolayTsanov&quot;&gt;@NikolayTsanov&lt;/a&gt;) for more of the insights.&lt;/p&gt;

&lt;p&gt;Without further ado let‚Äôs start with the first topic of the newsletter - getting rid of the distractions and styling your IDE (not only for you to look cool in front of your colleagues, but also important for your productivity).&lt;/p&gt;

&lt;p&gt;Note: for windows users, some of the shortcodes that I‚Äôll reference might be a bit different - when I mention the &lt;strong&gt;Cmd&lt;/strong&gt; key, you need to replace it with &lt;strong&gt;Ctrl&lt;/strong&gt;. (More on the keymaps between PC and macOS can be found on the Microsoft‚Äôs &lt;a href=&quot;https://support.microsoft.com/en-us/help/970299/keyboard-mappings-using-a-pc-keyboard-on-a-macintosh&quot;&gt;website&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Topic I - Aestetics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Removing the Panels and Floating Tools&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Moving the Sidebar (Projects Explorer)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Picking up a Theme (determine the best theme based on your surrounding)&lt;/li&gt;
  &lt;li&gt;Picking up a Font (determine the best font for readability)&lt;/li&gt;
  &lt;li&gt;Better Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;removing-the-panels-and-floating-tools&quot;&gt;Removing the Panels and Floating Tools&lt;/h2&gt;
&lt;p&gt;As I mentioned a few times already, panels are distractions. Hiding them will be more beneficial to you. If you need them, you can always toggle or assign a shortcode for easy access. In PhpStorm, there are plenty of them, most of which you‚Äôll probably never use. This is what you‚Äôll most probably have at the beginning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, your attention is ‚Äúhijacked‚Äù by the information spilt on your screen. We‚Äôll start off by removing the bars (Navigation Bar and Status Bar). Easiest way to do so is by going &lt;strong&gt;View &amp;gt; Appearance &amp;gt; Status Bar&lt;/strong&gt;. All of these options are available by also doing &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äústatus bar‚Äù &amp;gt; Show Status Bar (to off)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! Now that we have the Status Bar removed, we can also get rid of the Tool Window Bars (&lt;strong&gt;View &amp;gt; Appearance &amp;gt; Tool Window Bar&lt;/strong&gt; or &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äútool window bar‚Äù &amp;gt; Hide Tool Window Bar (to on)&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It already looks way better than before. However, there are still two panels left. By doing &lt;strong&gt;View &amp;gt; Appearance &amp;gt; Navigation Bar&lt;/strong&gt; or &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äúnavigation bar‚Äù &amp;gt; Show Navigation Bar (to off)&lt;/strong&gt; we get rid of a huge portion of the taken space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, we are left with the floating browsers. Let‚Äôs be honest, probably nobody uses them that often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They can be removed simply by going to the PhpStorm‚Äôs settings and deselecting them. &lt;strong&gt;PhpStorm &amp;gt; Preferences &amp;gt; Tools &amp;gt; Web Browsers&lt;/strong&gt;, alternatively &lt;strong&gt;File &amp;gt; Settings &amp;gt; Tools &amp;gt; Web Browsers (on Windows and Linux)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We finally end up with a clean and distraction-free IDE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although, there is still a bit more left. On the bottom part of the window you can see the breadcrumbs. They are considered helpful by many, however, I personally never look at them (so I tend to hide them). It is your decision to make, to hide them you can just do &lt;strong&gt;Navigate &amp;gt; Search Everywhere &amp;gt; type ‚Äúbreadcrumbs‚Äù &amp;gt; Show Breadcrumbs (to off)&lt;/strong&gt; or &lt;strong&gt;PhpStorm &amp;gt; Preferences &amp;gt; Editor &amp;gt; General &amp;gt; Breadcrumbs &amp;gt; Show breadcrumbs (on macOS)&lt;/strong&gt;, alternatively &lt;strong&gt;File &amp;gt; Settings &amp;gt; Editor &amp;gt; General &amp;gt; Breadcrumbs &amp;gt; Show breadcrumbs (on Windows and Linux)&lt;/strong&gt;. In the settings, you can see that you have the option where to place them (top or bottom) and for which languages to show them. Completely up to you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you might ask yourself, ‚ÄúWhy didn‚Äôt he hide the tabs?‚Äù. I enjoy using the tabs, there are some tricks that we‚Äôll explore later in the series on how to limit the number of them and how to easily switch left and right using the keyboard. When working on multiple files, I find myself switching often between them (even with split screen). Using less brainpower to remember which file I have to search and switch to every time I‚Äôm working is something that I enjoy and you‚Äôll probably notice it as well in the long run.&lt;/p&gt;

&lt;h2 id=&quot;moving-the-sidebar-tool-window-or-project-explorer&quot;&gt;Moving the Sidebar (Tool Window or ‚ÄúProject‚Äù Explorer)&lt;/h2&gt;
&lt;p&gt;If you are like me, you‚Äôre probably toggling the sidebar from time to time. You probably have a shortcode (keymap) that you use all the time (we‚Äôll explore this at a later point). What happens when the sidebar is on the left is that it pushes the code every single time you make it visible or hide it. Ideally, you won‚Äôt need it that often, however, for the times that you actually need it, I prefer to have it on the right side. It is pretty straightforward, &lt;strong&gt;‚öô (Gear Icon) &amp;gt; Move To &amp;gt; Right Top&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, your IDE starts getting in shape. However, still long way to go! In the next email, we‚Äôll explore themes (why you should pick up based on your surrounding), fonts and more!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phpstorm-but-better-getting-rid-of-the-distractions/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next Time&lt;/h2&gt;
&lt;p&gt;I want to keep the reading time relatively small. So some of the topics that I‚Äôll cover will be split into multiple parts. Next time, I‚Äôll cover:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Picking up a Theme (determine the best theme based on your surrounding)&lt;/li&gt;
  &lt;li&gt;Picking up a Font (determine the best font for readability)&lt;/li&gt;
  &lt;li&gt;Better Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we‚Äôll slowly start getting into more complex material (PSR-12, shortcodes, settings and more).&lt;/p&gt;

&lt;h2 id=&quot;more-useful-materials&quot;&gt;More Useful Materials&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Christoph Rumpel has nicely &lt;a href=&quot;https://www.youtube.com/watch?v=3SUtEnMj1ws&quot;&gt;illustrated&lt;/a&gt; some of the concepts that I‚Äôve covered in this email. Make sure to check him out!&lt;/li&gt;
  &lt;li&gt;If you want to find more on how to set up PhpStorm with Xdebug &amp;amp; Docker, you can find Derick Rethans‚Äôs &lt;a href=&quot;https://vimeo.com/433218463&quot;&gt;walkthrough&lt;/a&gt; interesting. Derick is also the creator of Xdebug, so he‚Äôs the best person you can find for the job.&lt;/li&gt;
  &lt;li&gt;For the people using Laravel‚Äôs Homestead, Daniel Verner‚Äôs &lt;a href=&quot;https://42coders.com/how-to-set-up-debugging-with-phpstorm-and-homestead/&quot;&gt;post&lt;/a&gt; on this topic will be of a good use!&lt;/li&gt;
  &lt;li&gt;PhpStorm is known to have some performance issues. Project Lanai is a joint effort between JetBrains and Oracle that looks to solve this. Check Alex Vanderbist‚Äôs (member of Spatie) &lt;a href=&quot;https://alexvanderbist.com/2020/enable-early-access-metal-support-for-jetbrains-ides/&quot;&gt;post&lt;/a&gt; on this topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also be on the list! Make sure you contact me with a link to your work related to PhpStorm. If I find it useful, it will be included in the next email!&lt;/p&gt;

&lt;h2 id=&quot;news-things-that-you-might-have-missed&quot;&gt;News (Things That You Might Have Missed)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;PhpStorm 2020.1.3 has been released! Mainly bug fixes - make sure you check out the &lt;a href=&quot;https://blog.jetbrains.com/phpstorm/2020/07/phpstorm-2020-1-3-is-released/?fbclid=IwAR3Fvp5o46N0OFfJGlLp9kInWfk9h-VPITwM-By-01zbJlfmyjOSFK3YRDA&quot;&gt;changelog&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Support for Psalm is &lt;a href=&quot;https://blog.jetbrains.com/phpstorm/2020/07/phpstan-and-psalm-support-coming-to-phpstorm/&quot;&gt;coming soon&lt;/a&gt; (probably 2020.3).&lt;/li&gt;
  &lt;li&gt;PhpStorm 2020.2 will introduce many cool stuff including PHP 8 Union Types support. Read more on their &lt;a href=&quot;https://blog.jetbrains.com/phpstorm/2020/07/phpstorm-2020-2-eap-6-union-nbsp-types-are-here/&quot;&gt;blog&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center pb-2&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I only have two elephpants btw, how about you? Share a pic! &lt;a href=&quot;https://t.co/AyIHQcT0K6&quot;&gt;pic.twitter.com/AyIHQcT0K6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brent (@brendt_gd) &lt;a href=&quot;https://twitter.com/brendt_gd/status/1279056896230645773?ref_src=twsrc%5Etfw&quot;&gt;July 3, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you want to get one of these cute elephpants which are not for sale yet. The staff of PhpStorm is sending them to the most active EAPers! So make sure you try the latest builds and give feedback and you might win one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I‚Äôm really excited to hear what you think about the newsletter. Make sure you drop me a line on &lt;a href=&quot;https://twitter.com/NikolayTsanov&quot;&gt;Twitter&lt;/a&gt;! I really appreciate spreading the word about this and I‚Äôm welcoming all suggestions!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="phpstorm" /><category term="tools" /><category term="php" /><summary type="html">This is an archive of the first email from the series - ‚ÄúPhpStorm, But Better!‚Äù. In the emails, I‚Äôm sharing thoughts, news and more about PhpStorm, so make sure you‚Äôre not missing anything by signing up for the newsletter!</summary></entry><entry><title type="html">The Importance of the Meta Theme Color</title><link href="https://ntsanov.com/blog/the-importance-of-the-meta-theme-color" rel="alternate" type="text/html" title="The Importance of the Meta Theme Color" /><published>2020-05-19T00:00:00+03:00</published><updated>2020-05-19T00:00:00+03:00</updated><id>https://ntsanov.com/blog/the-importance-of-the-meta-theme-color</id><content type="html" xml:base="https://ntsanov.com/blog/the-importance-of-the-meta-theme-color">&lt;p&gt;You have probably noticed that on some popular website when visited on mobile, the menu bar in Chrome magically changes its colour to match the primary colour of the page.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://miro.medium.com/max/1400/1*Rt7lUs235zuIFyj9V4nJcA.jpeg&quot; alt=&quot;Medium‚Äôs website with a nice contrast between the menu bar and the page&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Medium‚Äôs website with a nice contrast between the menu bar and the page&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://miro.medium.com/max/1400/1*sB6AGTW2FeQhpNewsD3XrA.jpeg&quot; alt=&quot;The Guardian‚Äôs Website&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;The Guardian‚Äôs Website&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There is no magic in that. This can easily be achieved by using only one line of code inserted directly into the &lt;strong&gt;&amp;lt;head&amp;gt;&lt;/strong&gt; tag of your page. This will suggest to the browser to use this colour rather than the default one.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other popular websites using this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://edition.cnn.com/&quot;&gt;https://edition.cnn.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnet.com/&quot;&gt;https://www.cnet.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;https://github.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one line can go a long way in helping your clients notice you and your website. It simply looks more professional and you appear to have spent more time on your design. Support for this feature has been introduced in version 39 of Chrome for Android on Lollipop.&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="html" /><category term="ux" /><category term="css" /><summary type="html">You have probably noticed that on some popular website when visited on mobile, the menu bar in Chrome magically changes its colour to match the primary colour of the page.</summary></entry><entry><title type="html">Integrate Google Tag Manager with an existing cookie consent form</title><link href="https://ntsanov.com/blog/integrate-google-tag-manager-with-an-existing-cookie-consent-form" rel="alternate" type="text/html" title="Integrate Google Tag Manager with an existing cookie consent form" /><published>2020-05-05T00:00:00+03:00</published><updated>2020-05-05T00:00:00+03:00</updated><id>https://ntsanov.com/blog/integrate-google-tag-manager-with-an-existing-cookie-consent-form</id><content type="html" xml:base="https://ntsanov.com/blog/integrate-google-tag-manager-with-an-existing-cookie-consent-form">&lt;p&gt;Sometimes, Google Tag Manager can be overwhelming. I do like it when it works, but it requires a lot of tinkering before getting the wanted results. Before I start, I must say that I am not an expert in any way with Google Tag Manager, the suggested approach below is just an example of how one can go about solving an issue we experienced working on a project that used VueJS to present the user with a cookie consent banner. We had to provide the user with the option to opt-out or opt-in from certain groups. The ‚Äústatistics‚Äù group included Google Analytics. There might be a prettier solution, however, most of the articles out there only cover scenarios where the website already uses a service such as Cookiebot, OneTrust or other alternatives.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://cdn-images-1.medium.com/max/9620/1*T-iADds-1lCncd92GIIyhA.jpeg&quot; alt=&quot;Photo by [Luke Chesser](https://unsplash.com/@lukechesser?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/analytics?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@lukechesser?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Luke Chesser&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/analytics?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;getting-started-with-google-tag-manager-and-google-analytics&quot;&gt;Getting started with Google Tag Manager and Google Analytics&lt;/h2&gt;

&lt;p&gt;Firstly, we need to set up Google Tag Manager into our existing project and import Google Analytics. Bear in mind, it is really important to remove any previous code related to tracking before adding GTM (I will talk about this later). We will start by adding a new account to Google Tag Manager. For account name, you can choose the name of your project, the name of the company you are working for or anything else you like. Make sure to keep it consistent, soon you might end up with a dozen of projects!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://cdn-images-1.medium.com/max/4760/1*FxjEewvDvUfz1VIuToyMmA.png&quot; alt=&quot;Setup account‚Äôs information&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Setup account‚Äôs information&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The account will be the main holder for the containers. A container is simply a bundle of scripts that will execute following some criteria. An example of having multiple containers for one account is if you want to split the various scripts that will run on the main domain and the subdomain. Therefore, you will setup a container for example.com and staging.example.com . We will also pick Web as a targeted platform. Everything here can be changed later on!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://cdn-images-1.medium.com/max/4628/1*U_8kWJlcdJIrumn57fEoUw.png&quot; alt=&quot;Setup a container for the current account&quot; /&gt;
    &lt;figcaption&gt;&lt;p&gt;Setup a container for the current account&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After you are done setting up everything, you will be prompted with code snippets that you can directly import into your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2824/1*sU6UG7e8Ll3-t9jNIGuCXg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: You do not need the second code snippet if you are not planning on supporting older browser.&lt;/p&gt;

&lt;p&gt;However, I prefer using a dedicated package that will act as a wrapper around Google Tag Manager. The package will provide one more level of abstraction. Since the project uses VueJS heavily, I came across this lightweight package &lt;a href=&quot;https://github.com/mib200/vue-gtm&quot;&gt;https://github.com/mib200/vue-gtm&lt;/a&gt; that also automatically loads the GTM script. There are also some additional configuration that you can do, such as enable or disable it based on a condition and more!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install vue-gtm --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then import it in your main script, in my case app.js&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueGtm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue-gtm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VueGtm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GTM-P42GL2L&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we want to make sure that we only load GTM and nothing else! This is really important, we do not want to track the same thing twice! A neat way to check for this is by using the Tag Assistant extension, available only on &lt;a href=&quot;https://chrome.google.com/webstore/detail/tag-assistant-by-google/kejbdjndbnbjgmefkgdddjlbokphdefk?hl=en&quot;&gt;Chrome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4248/1*yrkyB_BsXlQGU3N2zMb5uQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, navigate to the url of your site and enable the extension (you will probably need to reload when you enable it). You should be displayed with only one tag that has been fired.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*JefPeTP0rBDVh59Odqm3jw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, you might also end up with a ‚ÄúHTTP response code indicates tag failed to fire: Status 404. This could be due to an empty or un-published container‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*ceHSBNsYgZfc9f-lWcXbRw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The warning is pretty self-explanatory, make sure you publish your container or preview it. Both will work. Make sure your container if published for production!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*pj1XTVkRfECk2YbLNaSNWw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have everything up and running, we can add our Google Analytics Tracking ID to GTM (I assume you already have such, it should be in the format UA-XXXXXXXXX‚ÄìX). To add a script to your site you need to add a tag in Google Tag Manager. Your tag‚Äôs configuration should looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*5wFeLFEoylEmpFZhs-Ca2Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a tag to be fired (a script to be loaded) on your website, you need to set up a trigger for it. The trigger that we are going to set will read a value from a cookie and based on that fire the tag. Therefore, if the tag is not fired then the user would not get GA cookies set in the browser. We want to fire the tag on all pages so we will select ‚ÄúPage View‚Äù as a trigger. But, we also want to restrict this by checking whether we are allowed to fire the tag or not. This can be done by selecting the ‚ÄúSome Page Views‚Äù option and adding a new variable or choosing from the existing ones.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*aHEpU9Rb-9KN5CPPerWDkw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In our case, we would want to make a custom variable that holds the consent value. Now, there are few options that we can pick. The first one is to make a new variable of type ‚ÄúCustom Javascript‚Äù and have some code inside that reads from the document.cookie . While this is a realistic approach, it requires placing logic inside GTM, which I am not fan of. A better approach, in my opinion, is to read from a global javascript variable. As far as I know, most of the popular cookie consent services use a similar approach. This global variable can be controlled from the website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*HInXP6vnV_mmlozf72znDg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2880/1*k9_Mz70QsvsJRWizpwrvDg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, our Page View Trigger should fire only when the user consented to statistics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*KKZzzG_YyvJTpeamJdmKxg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are pretty much done. Now, we only need to add the trigger to the tag we made. On the website, you can present the user with a custom banner, popup or anything else you want. When the user agrees or declines, you can set a cookie which will keep track of the consent. This cookie can be used to set the global variable (every time the page reloads). The good thing now is that GTM does not rely on a cookie, but rather on a global variable that can be set in various ways: local storage, cookies etc.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The amazing part of Google Tag Manager is that it is highly customizable. There are various ways of implementing a GDPR form with it. To finish of, here is a list of great resources where you can explore more about GDPR and GTM:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Analytics Mania &lt;a href=&quot;https://www.analyticsmania.com/post/gdpr-cookie-consent-notification-with-google-tag-manager/&quot;&gt;https://www.analyticsmania.com/post/gdpr-cookie-consent-notification-with-google-tag-manager/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sebastian Wismayer &lt;a href=&quot;https://sebastianwismayer.com/blog/step-by-step-visual-guide-to-gdpr-conform-cookie-consent/&quot;&gt;https://sebastianwismayer.com/blog/step-by-step-visual-guide-to-gdpr-conform-cookie-consent/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simo Ahava has an amazing blog dedicated to GTM tips &amp;amp; tricks. I highly recommend checking him out at &lt;a href=&quot;https://www.simoahava.com/categories/gtm-tips/&quot;&gt;https://www.simoahava.com/categories/gtm-tips/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading this article! Hope you found it interesting and helpful. You can find me on Twitter (@&lt;a href=&quot;https://twitter.com/NikolayTsanov&quot;&gt;NikolayTsanov&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt;</content><author><name>Nikolay Tsanov</name></author><category term="seo" /><category term="googletagmanager" /><category term="googleanalytics" /><category term="js" /><summary type="html">Sometimes, Google Tag Manager can be overwhelming. I do like it when it works, but it requires a lot of tinkering before getting the wanted results. Before I start, I must say that I am not an expert in any way with Google Tag Manager, the suggested approach below is just an example of how one can go about solving an issue we experienced working on a project that used VueJS to present the user with a cookie consent banner. We had to provide the user with the option to opt-out or opt-in from certain groups. The ‚Äústatistics‚Äù group included Google Analytics. There might be a prettier solution, however, most of the articles out there only cover scenarios where the website already uses a service such as Cookiebot, OneTrust or other alternatives.</summary></entry></feed>